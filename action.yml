name: "Prepare Release"
description: "Common setup for craft/prepare"
inputs:
  version:
    description: Version to release (optional)
    required: false
  calver:
    description: Use automatic CalVer versioning
    required: true
    default: false
  force:
    description: Force a release even when there are release-blockers (optional)
    required: false
  craft_version:
    description: The craft version to use, defaults to "latest" (optional)
    required: true
    default: latest
  path:
    description: The path that Craft will run inside. Defaults to `.`
    required: true
    default: "."

runs:
  using: "composite"
  steps:
    - id: killswitch
      name: Check release blockers
      shell: bash
      run: |
        if [[ -z '${{ inputs.force }}' ]] && gh issue list -l release-blocker -s open | grep -q '^[0-9]\+[[:space:]]'; then
          echo "Open release-blocking issues found, cancelling release...";
          gh api -X POST repos/:owner/:repo/actions/runs/$GITHUB_RUN_ID/cancel;
        fi
    - name: Determine version
      shell: bash
      run: |
        if [[ -n '${{ inputs.version }}' ]]; then
          echo 'RELEASE_VERSION=${{ inputs.version }}' >> $GITHUB_ENV;
        elif [[ '${{ inputs.calver }}' = 'true' ]]; then
          DATE_PART=$(date +'%y.%-m')
          declare -i PATCH_VERSION=0
          while gh api --silent "repos/:owner/:repo/git/ref/tags/$DATE_PART.$PATCH_VERSION" 2>/dev/null; do
            PATCH_VERSION+=1
          done
          echo "RELEASE_VERSION=${DATE_PART}.${PATCH_VERSION}" >> $GITHUB_ENV;
        else
          echo "You need to provide a version to release.";
          exit 1;
        fi
    - name: Set git user to getsentry-bot
      shell: bash
      run: |
        echo "GIT_COMMITTER_NAME=getsentry-bot" >> $GITHUB_ENV;
        echo "GIT_AUTHOR_NAME=getsentry-bot" >> $GITHUB_ENV;
        echo "EMAIL=bot@getsentry.com" >> $GITHUB_ENV;
    - name: Install Craft
      shell: bash
      run: |
        craft_dir=$(mktemp -d -t .craft_XXX)
        cd $craft_dir
        npm install @sentry/craft@${{ inputs.craft_version }}
        echo "$craft_dir/node_modules/.bin" >> $GITHUB_PATH
    - name: Craft Prepare
      id: craft
      shell: bash
      env:
        CRAFT_LOG_LEVEL: WARN
      run: |
        cd '${{ inputs.path }}'
        craft prepare --no-input "${{ env.RELEASE_VERSION }}"
        echo $(craft targets)
        targets=$(craft targets | jq -r '.[]|"  [ ] \(.)"')
        echo "::set-output name=targets::$targets"
    - name: Get Release Git Info
      id: release-git-info
      shell: bash
      run: |
        echo "::set-output name=branch::$(git rev-parse --symbolic-full-name @{-1})"
        echo "::set-output name=sha::$(git rev-parse @{-1})"
        echo "::set-output name=last::$(gh api repos/:owner/:repo/releases/latest | jq -r .tag_name)"
    - name: Request publish
      shell: bash
      run: |
        # TODO(byk): Remove these lines when gh is updated in GHA
        curl -L 'https://github.com/cli/cli/releases/download/v1.8.0/gh_1.8.0_linux_amd64.deb' > gh.deb
        sudo dpkg -i gh.deb
        rm gh.deb

        if [[ '${{ inputs.path }}' == '.' ]]; then
          subdirectory='';
        else
          subdirectory='/${{ inputs.path }}';
        fi

        title="publish: $GITHUB_REPOSITORY$subdirectory@$RELEASE_VERSION"
        issue_count=$(gh issue list -S "'$title' in:title" | wc -l)
        if [[ "$issue_count" == '0' ]]; then
          echo "There's already an open publish request, skipped issue creation.";
          exit 0;
        fi

        body="Requested by: @$GITHUB_ACTOR

        Quick links:
        - [View changes](https://github.com/$GITHUB_REPOSITORY/compare/${{ steps.release-git-info.outputs.last }}...${{ steps.release-git-info.outputs.branch }})
        - [View check runs](https://github.com/$GITHUB_REPOSITORY/commit/${{ steps.release-git-info.outputs.sha }}/checks/)

        Assign the **accepted** label to this issue to approve the release.

        ### Targets
        ${{ steps.craft.outputs.targets }}
        "
        gh issue create -R "$GITHUB_REPOSITORY_OWNER/publish" --title "$ISSUE_TITLE" --body "$body"
