name: "Prepare Release"
description: "Common setup for craft/prepare"
inputs:
  version:
    description: Version to release (optional)
    required: false
  calver:
    description: Use automatic CalVer versioning
    required: true
    default: false
  force:
    description: Force a release even when there are release-blockers (optional)
    required: false
  craft_version:
    description: The craft version to use, defaults to "latest" (optional)
    required: true
    default: latest

runs:
  using: "composite"
  steps:
    - id: killswitch
      name: Check release blockers
      shell: bash
      run: |
        if [[ -z '${{ inputs.force }}' ]] && curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/issues?state=open&labels=release-blocker" | grep -Pzvo '\[[\s\n\r]*\]'; then
          echo "Open release-blocking issues found, cancelling release...";
          curl -sf -X POST -H 'Accept: application/vnd.github.v3+json' -H 'Authorization: token ${{ github.token }}' https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID/cancel;
        fi
    - name: Determine version
      shell: bash
      run: |
        if [[ -n '${{ inputs.version }}' ]]; then
          echo 'RELEASE_VERSION=${{ inputs.version }}' >> $GITHUB_ENV;
        elif [[ '${{ inputs.calver }}' = 'true' ]]
          DATE_PART=$(date +'%y.%-m')
          declare -i PATCH_VERSION=0
          while curl -sf -o /dev/null "https://api.github.com/repos/$GITHUB_REPOSITORY/git/ref/tags/$DATE_PART.$PATCH_VERSION"; do
            PATCH_VERSION+=1
          done
          echo "RELEASE_VERSION=${DATE_PART}.${PATCH_VERSION}" >> $GITHUB_ENV;
        else
          echo "You need to provide a version to release.";
          exit 1;
        fi
    - name: Set git user to getsentry-bot
      shell: bash
      run: |
        echo "GIT_COMMITTER_NAME=getsentry-bot" >> $GITHUB_ENV;
        echo "GIT_AUTHOR_NAME=getsentry-bot" >> $GITHUB_ENV;
        echo "EMAIL=bot@getsentry.com" >> $GITHUB_ENV;
    - name: Craft Prepare
      run: npx @sentry/craft@${{ inputs.craft_version }} prepare --no-input "${{ env.RELEASE_VERSION }}"
      env:
        # TODO: Remove this when the latest version of craft is released
        GITHUB_API_TOKEN: ${{ github.token }}
    - name: Get Release Git Info
      id: release-git-info
      run: |
        echo "::set-output name=branch::$(git rev-parse --symbolic-full-name @{-1})"
        echo "::set-output name=sha::$(git rev-parse @{-1})"
    - name: Request publish
      if: success()
      uses: actions/github-script@v3
      with:
        github-token: ${{ secrets.GH_RELEASE_PAT }}
        script: |
          const repoInfo = context.repo;
          await github.issues.create({
            owner: repoInfo.owner,
            repo: 'publish',
            title: `publish: ${repoInfo.repo}@${process.env.RELEASE_VERSION}`,
            body: [
              `Requested by: @${context.actor}`
              ``,
              `Quick links:`,
              `- [View changes](https://github.com/${repoInfo.owner}/${repoInfo.repo}/compare/${{ steps.release-git-info.outputs.branch }})`,
              `- [View check runs](https://github.com/${repoInfo.owner}/${repoInfo.repo}/commit/${{ steps.release-git-info.outputs.sha }}/checks/)`,
            ].join('\n'),
          });
